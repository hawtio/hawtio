server.port=10000
management.server.port=10001

# Adding SameSite=Strict for session cookie is recommended
server.servlet.session.cookie.same-site=strict

management.endpoints.web.exposure.include=hawtio,jolokia

spring.jmx.enabled=true

logging.level.io.hawt=INFO
logging.level.org.springframework=WARN
logging.level.org.springframework.boot.autoconfigure.security=INFO
logging.level.io.undertow=WARN

# When Hawtio authentication is disabled, Spring Security is still used when configured
# with @org.springframework.security.config.annotation.web.configuration.EnableWebSecurity annotation
# but Hawtio will not be aware of this. So keep authentication enabled when using @EnableWebSecurity
hawtio.authenticationEnabled=true

# Spring Security
# https://docs.spring.io/spring-security/reference/6.2/servlet/authentication/passwords/in-memory.html#servlet-authentication-inmemory
# We can use single user for org.springframework.security.core.userdetails.UserDetailsService using properties
# with "spring.security.user." prefix.
# But it's more flexible to configure a @Bean method returning UserDetailsService implementation, like:
#  - org.springframework.security.provisioning.InMemoryUserDetailsManager
#  - org.springframework.security.provisioning.JdbcUserDetailsManager
#spring.security.user.name=hawtio
#spring.security.user.password=hawtio
#spring.security.user.roles=admin,viewer
